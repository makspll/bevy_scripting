r#"
{% for docstring in function.docstrings -%}
///{{docstring}}
{% endfor -%}

{%- filter prettyplease(impl_context=true) -%}
#[lua(

{%- if function.from_trait_path -%}
    {% if function.from_trait_path is matching("std::(ops|cmp)::(PartialEq|Neg|Mul|Add|Sub|Div|Rem)") %}
    {% set is_op = true %}
    {% endif %}
as_trait="{{ function.from_trait_path }}",
{%- endif -%}
{% if is_op %}
composite="{{ function.ident }}",
{% endif %}

{% if function.from_trait_path %}
    {% if function.from_trait_path is starting_with("std::ops::Neg") %}
    metamethod="Unm",
    {% elif function.from_trait_path is starting_with("std::ops::Mul") %}
    metamethod="Mul",
    {% elif function.from_trait_path is starting_with("std::ops::Add") %}
    metamethod="Add",
    {% elif function.from_trait_path is starting_with("std::ops::Sub") %}
    metamethod="Sub",
    {% elif function.from_trait_path is starting_with("std::ops::Div") %}
    metamethod="Div",
    {% elif function.from_trait_path is starting_with("std::ops::Rem") %}
    metamethod="Mod",
    {% elif function.from_trait_path is starting_with("std::cmp::PartialEq") %}
    metamethod="Eq",
    {% endif %}
{% endif %}
)] 
{% if function.is_unsafe %}unsafe {% endif -%}fn {{ function.ident }} (
    {%- filter separated(delimeter=", ", split_at="---", ignore_first=true) -%}

    {%- for arg in function.args -%}
        ---
        {%- if arg.ident != "self" -%}
            {{- arg.ident -}}
        {%- else -%}
            _{{- arg.ident -}}
        {%- endif -%} 
        : {{- arg.proxy_ty -}}
    {%- endfor -%}

    {%- endfilter -%}
) -> {{ function.output.proxy_ty -}};
{%- endfilter %}
"#