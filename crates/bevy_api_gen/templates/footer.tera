{% if args.self_is_bms_lua %}
{% set bms_lua_path="crate" %}
{% else %}
{% set bms_lua_path="bevy_mod_scripting::lua"%}
{% endif %}


pub struct {{ "ScriptingPlugin" | prefix_cratename | convert_case(case="upper_camel")}};

impl ::bevy::app::Plugin for {{ "ScriptingPlugin" | prefix_cratename | convert_case(case="upper_camel")}} {
    fn build(&self, app: &mut ::bevy::prelude::App) {
        let mut world = app.world_mut();

        {% for item in items %}
        NamespaceBuilder::<::{{ item.import_path }}>::new(world)
        {%- for function in item.functions -%}
            .register("{{ function.ident }}", |
            {%- for arg in function.args -%}
                {%- if arg.proxy_ty is matching("Mut.*")-%}
                mut {% endif -%}
                {{- arg.ident | to_arg_pattern() -}}
            : {{- arg.proxy_ty -}},
            {%- endfor -%}
            | {
                let output: {{ function.output.proxy_ty }} =
                {%- if function.from_trait_path -%}
                {{- function_call_expression(type=item.import_path, trait=function.from_trait_path, function=function.ident) -}}
                {%- else -%}
                {{- function_call_expression(type=item.import_path, function=function.ident) -}}
                {%- endif -%}
                (
                    {%- for arg in function.args -%}
                        {%- if arg.proxy_ty is matching("Ref.*")-%}
                        &{% endif -%}
                        {%- if arg.proxy_ty is matching ("Mut.*")-%}
                        &mut {% endif -%}
                        {{- arg.ident | to_arg_pattern() -}}
                        {%- if arg.proxy_ty is matching("Val.*")-%}
                        .into_inner()
                        {%- endif -%}, 
                    {%- endfor -%}
                ).into();
                output
            })
        {%- endfor -%};     
        {% endfor %}
    }
}